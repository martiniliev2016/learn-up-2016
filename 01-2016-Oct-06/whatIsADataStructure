 ### Структура от данни

1.Стекът теоретично може да събере безкраен брой обекти, но на практика само краен брой, ограничен от количеството памет. 
Обектите могат да се поставят и да се четат (вадят) единствено от горната страна на стека. Стекът има три операции:

push (добавяне) – поставя нов обект върху стека
pop или pull (изваждане/изтегляне) – вади най-горния (последно добавения) елемент от стека
peek (надникване) – показва най-горния елемент от стека без да го изважда.

Пример:
class Stack {
    int size;       // големина на стека
    int top;        // позиция на пойнтъра към стека
    T* values;      // масив със стойности

[за повече информация](https://bg.wikipedia.org/wiki/Стек_(структура_от_данни))


2.Опашката представлява крайно, линейно множество от елементи, 
при което елементи се добавят само най-отзад (enqueue) и се извличат само най-отпред (dequeue).

Допустими операции с опашки[редактиране | редактиране на кода]
Създаване на празна опашка – опашка която не съдържа елементи.
Проверка дали опашката е празна
Добавяне на елемент - само след края на опашката.
Отстраняване на елемент - само от началото (ако опашката не е празна).
Достъп до елемент - възможен е достъп само до началото на опашката (ако не е празна).

Пример:
 {
        Queue<int> numbersQueue = new Queue<int>();      // инициализация на опашка

        // Пример1 - Добавяне и извличане на елементи от опашка
        for (int i = 0; i < 10; i++)
        {
            numbersQueue.Enqueue(i);       // void метода Enqueue, приема обект от типа на опашката (в случая int) като параметър
        }

        while (numbersQueue.Count > 0)
        {
            Console.WriteLine(numbersQueue.Dequeue());   // метода Dequeue връща следващото число
        }

[за повече информация](https://bg.wikipedia.org/wiki/Опашка_(абстрактен_тип_данни))


3.Дървовидна структура е често използвана структура от данни. То изобразява по естествен
 начин всякакви йерархии от обекти и тяхната взаимосвързаност.

Терминология[редактиране | редактиране на кода]
Корен – Най-важния връх в дървото.Няма предшественици.
Родител – предшественик на наследник.
Братя – върхове с общ родител.
Непряк наследник – връх който не е пряк наследник.
Дете – пряк наследник.
Прародител – връх,който е непряк родител.
Вътрешен връх – връх, който има и родител ,и дете.
Външен връх(или листо) – връх, който няма наследници.
Ребро – пряка връзка между два върха.
Път – поредица от ребра между върховете.
Дължина на път – броя на ребрата свързващи върховете.
Дълбочина на връх – дължината на пътя от корена до върха.
Височина на дърво – максималната дълбочина.
Гора – съвкупност от несвързани дървета.

Пример:
public class Node {

    private int data;

    private Node left;

    private Node right;

    private Node parent;

    public int getData() {

        return this.data;

    }

    public void setData(int data) {

        this.data = data;

    }

    public Node getLeft() {

        return this.left;

    }

    public void setLeft(Node left) {

        this.left = left;

    }

    public Node getRight() {

        return this.right;

    }

    public void setRight(Node right) {

        this.right = right;

    }

    public Node getParent() {

        return this.parent;

    }

    public void setParent(Node parent) {

        this.parent = parent;

    }

}

[за повече информация](https://bg.wikipedia.org/wiki/Дърво_(структура_от_данни))
